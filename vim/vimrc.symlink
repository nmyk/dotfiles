set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
Plugin 'tmhedberg/SimpylFold'
Bundle 'Valloric/YouCompleteMe'
" Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'jnurmine/Zenburn'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'tpope/vim-fugitive'
Plugin 'kien/ctrlp.vim'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'benmills/vimux'
Plugin 'jpalardy/vim-slime'
Plugin 'itchyny/lightline.vim'
Plugin 'AndrewRadev/splitjoin.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" leader key stuff
let mapleader=" "
let maplocalleader=" "
nnoremap <leader>d dd
map <silent> <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <silent> <leader>t :NERDTreeToggle<CR>
nnoremap <silent> <leader>b :bn<CR>
" hotkeys to resize panes
nnoremap <silent> <Leader>h :vertical resize -5<cr>
nnoremap <silent> <Leader>j :resize +5<cr>
nnoremap <silent> <Leader>k :resize -5<cr>
nnoremap <silent> <Leader>l :vertical resize +5<cr>
nnoremap <leader>vt :wall<CR>:VimuxRunCommand("clear; pytest test")<CR>
nmap <leader>vz :call VimuxZoomRunner()<CR>
nmap <leader>vv :VimuxPromptCommand<CR>
nmap <leader>v<Enter> :VimuxRunLastCommand<CR>
nmap <leader>p :set paste<CR>p:set paste!<CR>

 " If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <LocalLeader>vs "vy :call VimuxSlime()<CR>

 " Select current paragraph and send it to tmux
nmap <LocalLeader>vs vip<LocalLeader>vs<CR>

"fix weird backspace thing
set backspace=indent,eol,start

" tab stuff
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set list
set listchars=tab:␉·

" Python
au BufNewFile,BufRead *.py
    \ set textwidth=79 |
    \ set expandtab |
    \ set fileformat=unix |
    \ nmap <silent> <leader>vp :VimuxRunCommand("ipython")<CR>|
    \ xmap <leader><Enter> <Plug>SlimeRegionSend|
    \ nmap <leader><Enter> <Plug>SlimeParagraphSend|
    \ nmap <leader>a ggVG<leader><Enter>`.|
    \ let g:slime_dont_ask_default = 1 |
    \ let g:slime_target="tmux" |
    \ let g:slime_python_ipython = 1 |
    \ let g:slime_paste_file = "$HOME/.slime_paste" |
    \ let g:slime_default_config = {"socket_name": split($TMUX, ",")[0], "target_pane": ":0.1"}

" SQL
au BufNewFile,BufRead *.sql
    \ set expandtab

" Plaintext
au BufNewFile,BufRead *.txt,*.md
    \ Goyo |
    \ set linebreak |
    \ set display=lastline |
    \ nnoremap j gj|
    \ nnoremap k gk|
    \ nnoremap gj j|
    \ nnoremap gk k|
    \ nnoremap <leader>w g<C-g>

" catch extraneous whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.hs,*.sql match BadWhitespace /\s\+$/

scriptencoding=utf-8
set encoding=utf-8
set splitright

" remap stuff for easy switching between panes
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"python with virtualenv support
py3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    exec(compile(open(activate_this, 'rb').read(), activate_this, 'exec'), dict(__file__=activate_this))
EOF

"python highlighting
let python_highlight_all=1
syntax on

"jk escapes insert mode
imap jk <Esc>

"default unfolded
set foldlevel=99

"ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$']

"line numbering
set number
nnoremap <silent> <C-n> :set relativenumber!<cr>

"fix YCM errors
let g:ycm_path_to_python_interpreter="/usr/bin/python"
let g:ycm_python_binary_path=$VIRTUAL_ENV . "/bin/python"

" auto close preview window
let g:ycm_autoclose_preview_window_after_insertion = 1

"Quit Goyo normally
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd! User GoyoEnter call <SID>goyo_enter()
autocmd! User GoyoLeave call <SID>goyo_leave()

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

"to avoid redundancy with powerline
set noshowmode

" always show statusline
set laststatus=2


let g:lightline = {
     \ 'colorscheme': 'one',
     \ }

" make it so swap files don't muck up my dropbox history
set directory^=$HOME/.vim/tmp//

" automatically center screen when jumping around
nnoremap n nzz
nnoremap N Nzz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz
nnoremap } }zz
nnoremap { {zz
nnoremap G Gzz
set scrolloff=20

set term=screen-256color

" yank to clipboard
set clipboard=unnamed

" highlight as you search
set incsearch

" cursor shape
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
